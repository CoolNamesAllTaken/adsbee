.program preamble_detector

; This program runs at 48MHz. Each clock cycle is 1/48us.

.define pulses_pin_index 0
.define demod_pin_index 1
.wrap_target
; BEGIN DOUBLE PULSE MATCH
waiting_for_first_edge:
    set x, 1 ; pulse match section runs twice
    wait 1 pin, pulses_pin_index [11] ; wait for in_pin to go HI, delay to middle of the eye
check_pulse_1_hi:
    jmp pin check_pulse_1_lo [23] ; if first pulse HI is ok, look for first pulse LO
    jmp waiting_for_first_edge ; first pulse did not go HI, abort
check_pulse_1_lo:
    jmp pin waiting_for_first_edge [23] ; if first pulse did not go LO, abort
    jmp pin check_pulse_2_lo [23]; if second pulse HI is ok, look for second pulse LO
    jmp waiting_for_first_edge ; second pulse did not go HI, abort
check_pulse_2_lo:
    jmp pin waiting_for_first_edge [23] ; if second pulse does not go LO, abort
    jmp pin waiting_for_first_edge [23]
    jmp pin waiting_for_first_edge [23]
    jmp pin waiting_for_first_edge [20]
    jmp x-- check_pulse_1_hi [2] ; loop to beginning of double pulse loop at end of first double pulse
; END DOUBLE PULSE MATCH
; BEGIN EXTRA DELAY AFTER SECOND DOUBLE PULSE
preamble_tail:
    ; enforce preamble tail LO till just before the rising edge if first message bit is a 1
    jmp pin waiting_for_first_edge [23] 
    nop [17] ; delay 6 clock cycles so that demod signal activates at 0.25 bit time on first bit
; END EXTRA DELAY AFTER SECOND DOUBLE PULSE
    
    ; Extra pattern match segments ignored to provide more time for demodulator to kick
    ; on before start of actual data.
    ; jmp pin waiting_for_first_edge [7]
preamble_matched:
    ; Note: IRQ number could be changed with some jumps on scratch y for a dual-band receiver version.
    ; irq set 0 side 1 ; set the DEMOD IRQ to begin decoding message body
    set pins 1 [2] ; set demod pin to indicate message body beginning
    wait 1 pin, pulses_pin_index [11] ; wait till middle of message eye to look for end
waiting_for_end_of_message:
    set x, 12 [2] ; [1.5us] number of sequential idle samples required to mark end of packet
idle_countdown:
    jmp pin waiting_for_end_of_message [2] ; start over the idle countdown if received a non idle bit
    jmp x-- idle_countdown [2] ; still idle, keep counting down if the timer isn't up
    set pins, 0 ; set demod pin to 0 to indicate message is finished
    irq set 0 [1] ; set the DEMOD IRQ to indicate the message body is finished
    wait 0 irq 0 ; don't look for new messages until the current one has been processed
.wrap

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program
void preamble_detector_program_init(PIO pio, uint sm, uint offset, uint in_pin, uint out_pin, float div) {

    // Sets up state machine and wrap target. This function is automatically
    // generated in preamble_detector.pio.h.
    pio_sm_config c = preamble_detector_program_get_default_config(offset);

    // Allow PIO to control GPIO in_pin (as input)
    //pio_gpio_init(pio, in_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, in_pin, 1, false); // set one pin starting at in_pin to IN

    // Allow PIO to control GPIO out_pin (as output for debugging)
    pio_gpio_init(pio, out_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, out_pin, 1, true); // set one pin starting at out_pin to OUT

    // Connect in_pin to IN pin (control with 'in' instruction)
    sm_config_set_in_pins(&c, in_pin); // for WAIT
    sm_config_set_jmp_pin(&c, in_pin); // for JMP

    // Connect out_pin to SET and SIDESET
    sm_config_set_set_pins(&c, out_pin, 1); // set one pin as SET output
    sm_config_set_sideset_pins(&c, out_pin); 

    // Join RX and TX FIFOs together to allow 8x 32-bit words to be stored in the RX FIFO.
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    
    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

%}

.program message_demodulator
; Demod pin for knowing when a valid message demod interval has begun.
.define demod_in_pin_index 1
; Pulses input pin for reading current power level.
.define pulses_pin_index 0
; Allow side-setting the out_pin for debugging. 1x output pin can be optionally side-set.
.side_set 1 opt
; Assumes line is idle low, first bit is 0
; One bit is 16 cycles
; a '0' is encoded as 01
; a '1' is encoded as 10
;
; Both the IN base and the JMP pin mapping must be pointed at the GPIO used for RX.
; Autopush must be enabled.
; Before enabling the SM, it should be placed in a 'wait 1, pin` state, so that
; it will not start sampling until the initial line idle state ends.
jmp initial_entry
complete_demod:
    push block          ; Empty the ISR into the FIFO in preparation for next demod.
    in null 32          ; Ingest a full word of 0's into the FIFO to allow alignment.
initial_entry:
    wait 1 pin demod_in_pin_index side 0       ; Wait to enter DEMOD interval.
    jmp pin start_of_1 side 0
    jmp start_of_0 side 0

start_of_1:            ; We are 0.25 bits into a 1 - signal is HI
    nop [1]
    wait 0 pin pulses_pin_index      ; Wait for the 1->0 transition - at this point we are 0.5 into the bit
falling_edge_1:
    in x, 1 side 1    ; Emit a 1, sleep 3/4 of a bit (need 8 delay clocks before jump to start_of_1).

    ; This whole mess is equivalent to "jump to complete_demod if the demod pin is 0".
    mov osr, pins ; read pulses and demod bit into OSR
    out null, 1 ; dump the pulses bit
    out y, 1 ; move demod bit to scratch y
    out null, 30 ; dump the rest of the bits
    jmp !y complete_demod ; bail into idle state if demod bit is 0
    nop [2]
    
    jmp pin start_of_1 side 0; If signal is 1 again, it's another 1 bit, otherwise it's a 0

.wrap_target
start_of_0:            ; We are 0.25 bits into a 0 - signal is LO
    nop [1]
    wait 1 pin pulses_pin_index     ; Wait for the 0->1 transition - at this point we are 0.5 into the bit
rising_edge_0:
    in null, 1 side 1    ; Emit a 0, sleep 3/4 of a bit

    ; This whole mess is equivalent to "jump to complete_demod if the demod pin is 0".
    mov osr, pins ; read pulses and demod bit into OSR
    out null, 1 ; dump the pulses bit
    out y, 1 ; move demod bit to scratch y
    out null, 30 ; dump the rest of the bits
    jmp !y complete_demod ; bail into idle state if demod bit is 0
    nop [2] ; wait slightly for down-going slope

    jmp pin start_of_1 side 0; If signal is 0 again, it's another 0 bit otherwise it's a 1
.wrap

abort_demod:
    out null, 32; dump all the bits
    jmp initial_entry


% c-sdk {
static inline void message_demodulator_program_init(PIO pio, uint sm, uint offset, uint in_pin_base, uint recovered_clk_pin, float div) {
    uint demod_in_pin = in_pin_base+1;
    uint pulses_pin = in_pin_base;

    pio_sm_set_consecutive_pindirs(pio, sm, in_pin_base, 2, false); // in_pin_base is DEMOD input, in_pin_base + 1 is pulses
    //pio_gpio_init(pio, pulses_pin);
    //pio_gpio_init(pio, demod_in_pin);

    // Allow PIO to control GPIO 22 (as output for debugging)
    pio_gpio_init(pio, recovered_clk_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, recovered_clk_pin, 1, true); // set one pin starting at out_pin to OUT

    pio_sm_config c = message_demodulator_program_get_default_config(offset);
    sm_config_set_in_pins(&c, in_pin_base); // WAIT pins
    sm_config_set_jmp_pin(&c, pulses_pin); // JMP based on the comparator output
    sm_config_set_out_shift(&c, true, false, 0); // OSR shifts right, autopull turned off (using OSR for scratch)
    sm_config_set_in_shift(&c, false, true, 32); // ISR shifts left, autopush turned on
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    sm_config_set_clkdiv(&c, div);

    // Connect out_pin to SET and SIDESET
    sm_config_set_set_pins(&c, recovered_clk_pin, 1); // set one pin as SET output
    sm_config_set_sideset_pins(&c, recovered_clk_pin); 

    pio_sm_init(pio, sm, offset, &c);

    // X and Y are set to 0 and 1, to conveniently emit these to ISR/FIFO.
    pio_sm_exec(pio, sm, pio_encode_set(pio_x, 1));
    pio_sm_exec(pio, sm, pio_encode_set(pio_y, 0));
    // Assume line is idle low, and first transmitted bit is 0. Put SM in a
    // wait state before enabling. RX will begin once the first 0 symbol is
    // detected.
    ; pio_sm_exec(pio, sm, pio_encode_wait_pin(1, 0) | pio_encode_delay(2));
    ; pio_sm_set_enabled(pio, sm, true);
}
%}