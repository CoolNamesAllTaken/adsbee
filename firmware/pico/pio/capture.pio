.program preamble_detector

; This program runs at 48MHz. Each clock cycle is 1/48us.

.define pulses_pin_index 0
.define demod_pin_index 1

set pins 0 ; DEBUG

; Set preamble sequence in ISR.
mov isr null                        ; Clear ISR.
set x 0b101                     ; ISR = 0b00000000000000000000000000000000
in x 3                          ; ISR = 0b00000000000000000000000000000101
in null 4                       ; ISR = 0b00000000000000000000000001010000
in x 3                          ; ISR = 0b00000000000000000000001010000101
in null 6                       ; ISR = 0b00000000000000001010000101000000
mov x null

; BEGIN DOUBLE PULSE MATCH
.wrap_target
waiting_for_first_edge:
    mov osr isr                     ; OSR = 0b00000000000000001010000101000000
    out null 16                     ; OSR = 0b1010000101000000
    
    ; Build preamble pattern and load it into OSR: 0b1010000101000000

    ; set x 0b101                     ; ISR = 0b00000000000000000000000000000000
    ; in x 3                          ; ISR = 0b00000000000000000000000000000101
    ; in null 4                       ; ISR = 0b00000000000000000000000001010000
    ; in isr 7                        ; ISR = 0b00000000000000000010100001010000
    ; in null 2                       ; ISR = 0b00000000000000001010000101000000
    ; mov osr isr                     ; OSR = 0b00000000000000001010000101000000
    ; out null 16                     ; OSR = 0b1010000101000000


    
    ; out null 23                         ; debug:OSR = 0b101000000

    ; test with 0b1
    ; set x 0b11
    ; in x 1
    ; mov osr isr
    ; out null 31

    ; test with 0b10
    ; set x 0b10
    ; in x 2
    ; mov osr isr
    ; out null 30

    ; set x 0b1010
    ; in x 4
    ; ; in null 4
    ; mov osr isr
    ; out null 28

    
; Grab a new bit every 24 cycles.
;   6 cycles: Get bit.
;   12 cycles: Assert bit.
;   6 cycles: nop.
    wait 1 pin, pulses_pin_index    ; 1: wait for in_pin to go HI
check_next_bit:
    jmp !osre preamble_not_done_yet ; 2: 
preamble_matched:
    set pins 1 [2] ; set demod pin to indicate message body beginning
    wait 1 pin, pulses_pin_index [11] ; wait till middle of message eye to look for end
waiting_for_end_of_message:
    set x, 12 [2] ; [1.5us] number of sequential idle samples required to mark end of packet
idle_countdown:
    jmp pin waiting_for_end_of_message [2] ; start over the idle countdown if received a non idle bit
    jmp x-- idle_countdown [2] ; still idle, keep counting down if the timer isn't up
    set pins, 0 ; set demod pin to 0 to indicate message is finished
    irq set 0 [1] ; set the DEMOD IRQ to indicate the message body is finished
    wait 0 irq 0 ; don't look for new messages until the current one has been processed
.wrap

preamble_not_done_yet:
    out x, 1                        ; 3: Find next bit polarity from OSR.         
    jmp !x assert_pin_lo            ; 4:
    jmp assert_pin_hi               ; 5:




; Subroutines

; This section must take 18 cycles. 
; 2*x is number of cycles where pin must be HI
assert_pin_hi:
    set x 3 [5] ; 6-11: Assert HI for 12 cycles ((x+1) * (2 cycles per wrap))
aph_wrap:
    jmp pin aph_pin_is_hi
    jmp waiting_for_first_edge
aph_pin_is_hi:
    jmp x-- aph_wrap
    jmp check_next_bit [5]    ; 20-25: cycle idle at end

; This section must take 18 cycles.    
; 2*x is number of cycles where pin must be LO
assert_pin_lo:
    set x 3 [6] ; 5-11: Assert LO for 12 cycles ((x+1) * (2 cycles per wrap))
apl_wrap:
    jmp pin waiting_for_first_edge
    jmp x-- apl_wrap
    jmp check_next_bit [5]    ; 20-25: cycle idle at end (delay = 18-2*(x+1)-1)

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program
void preamble_detector_program_init(PIO pio, uint sm, uint offset, uint pulses_pin, uint demod_pin, float div) {

    // Sets up state machine and wrap target. This function is automatically
    // generated in preamble_detector.pio.h.
    pio_sm_config c = preamble_detector_program_get_default_config(offset);

    // Allow PIO to read GPIO pulses_pin (as input)
    pio_sm_set_consecutive_pindirs(pio, sm, pulses_pin, 1, false); // set one pin starting at pulses_pin to IN

    // Allow PIO to control GPIO demod_pin (as output for debugging)
    pio_gpio_init(pio, demod_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, demod_pin, 1, true); // set one pin starting at demod_pin to OUT

    // Connect pulses_pin to IN pin (control with 'in' instruction)
    sm_config_set_in_pins(&c, pulses_pin); // for WAIT
    sm_config_set_jmp_pin(&c, pulses_pin); // for JMP

    // Connect demod_pin to SET and SIDESET
    sm_config_set_set_pins(&c, demod_pin, 1); // set one pin as SET output
    sm_config_set_sideset_pins(&c, demod_pin); 

    sm_config_set_out_shift(&c, false, false, 32); // OSR shifts left, autopull threshold set to 32 (used for OSRE compare)
    sm_config_set_in_shift(&c, false, false, 32); // ISR shifts left, autopush turned off
    
    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

%}

.program message_demodulator
; Demod pin for knowing when a valid message demod interval has begun.
.define demod_in_pin_index 1
; Pulses input pin for reading current power level.
.define pulses_pin_index 0
; Allow side-setting the out_pin for debugging. 1x output pin can be optionally side-set.
.side_set 1 opt
; Assumes line is idle low, first bit is 0
; One bit is 16 cycles
; a '0' is encoded as 01
; a '1' is encoded as 10
;
; Both the IN base and the JMP pin mapping must be pointed at the GPIO used for RX.
; Autopush must be enabled.
; Before enabling the SM, it should be placed in a 'wait 1, pin` state, so that
; it will not start sampling until the initial line idle state ends.

initial_entry:
    wait 1 pin demod_in_pin_index [2]       ; Wait to enter DEMOD interval.
    jmp pin start_of_1 side 0
    jmp start_of_0 side 0

start_of_1:            ; We are 0.25 bits into a 1 - signal is HI
    nop [1]
    wait 0 pin pulses_pin_index      ; Wait for the 1->0 transition - at this point we are 0.5 into the bit
falling_edge_1:
    in x, 1 side 1    ; Emit a 1, sleep 3/4 of a bit (need 8 delay clocks before jump to start_of_1).

    ; This whole mess is equivalent to "jump to complete_demod if the demod pin is 0".
    mov osr, pins ; read pulses and demod bit into OSR
    out null, 1 ; dump the pulses bit
    out y, 1 ; move demod bit to scratch y
    out null, 30 ; dump the rest of the bits
    jmp !y complete_demod ; bail into idle state if demod bit is 0
    nop [2]
    
    jmp pin start_of_1 side 0; If signal is 1 again, it's another 1 bit, otherwise it's a 0

.wrap_target
start_of_0:            ; We are 0.25 bits into a 0 - signal is LO
    nop [1]
    wait 1 pin pulses_pin_index     ; Wait for the 0->1 transition - at this point we are 0.5 into the bit
rising_edge_0:
    in null, 1 side 1    ; Emit a 0, sleep 3/4 of a bit

    ; This whole mess is equivalent to "jump to complete_demod if the demod pin is 0".
    mov osr, pins ; read pulses and demod bit into OSR
    out null, 1 ; dump the pulses bit
    out y, 1 ; move demod bit to scratch y
    out null, 30 ; dump the rest of the bits
    jmp !y complete_demod ; bail into idle state if demod bit is 0
    nop [2] ; wait slightly for down-going slope

    jmp pin start_of_1 side 0; If signal is 0 again, it's another 0 bit otherwise it's a 1
.wrap
complete_demod:
    jmp complete_demod



% c-sdk {
static inline void message_demodulator_program_init(PIO pio, uint sm, uint offset, uint in_pin_base, uint recovered_clk_pin, float div) {
    uint demod_in_pin = in_pin_base+1;
    uint pulses_pin = in_pin_base;

    pio_sm_set_consecutive_pindirs(pio, sm, in_pin_base, 2, false); // in_pin_base is DEMOD input, in_pin_base + 1 is pulses

    // Allow PIO to control GPIO 22 (as output for debugging)
    pio_gpio_init(pio, recovered_clk_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, recovered_clk_pin, 1, true); // set one pin starting at out_pin to OUT

    pio_sm_config c = message_demodulator_program_get_default_config(offset);
    sm_config_set_in_pins(&c, in_pin_base); // WAIT pins
    sm_config_set_jmp_pin(&c, pulses_pin); // JMP based on the comparator output
    sm_config_set_out_shift(&c, true, false, 0); // OSR shifts right, autopull turned off (using OSR for scratch)
    sm_config_set_in_shift(&c, false, true, 32); // ISR shifts left, autopush turned on
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    sm_config_set_clkdiv(&c, div);

    // Connect out_pin to SET and SIDESET
    sm_config_set_set_pins(&c, recovered_clk_pin, 1); // set one pin as SET output
    sm_config_set_sideset_pins(&c, recovered_clk_pin); 

    pio_sm_init(pio, sm, offset, &c);

    // X and Y are set to 0 and 1, to conveniently emit these to ISR/FIFO.
    pio_sm_exec(pio, sm, pio_encode_set(pio_x, 1));
    pio_sm_exec(pio, sm, pio_encode_mov_not(pio_x, pio_null));
}
%}