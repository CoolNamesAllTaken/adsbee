import math

BEAST_TABLES_FILENAME = "beast_tables.hh"
MIN_RSSI_DBM = -100
MAX_RSSI_DBM = -40
MIN_RSSI_DBFS = -45
MAX_RSSI_DBFS = 0
RSSI_SCALE_FACTOR = (MAX_RSSI_DBFS - MIN_RSSI_DBFS) / (MAX_RSSI_DBM - MIN_RSSI_DBM)


def start_file():
    """
    Start the beast_tables.hh file.
    """
    with open(BEAST_TABLES_FILENAME, "w") as f:
        f.write("// This file is auto-generated by generate_beast_tables.py.\n")
        f.write("#ifndef BEAST_TABLES_HH_\n")
        f.write("#define BEAST_TABLES_HH_\n\n")
        f.write("#include <cstdint>\n\n")

def end_file():
    """
    End the beast_tables.hh file.
    """
    with open(BEAST_TABLES_FILENAME, "a") as f:
        f.write("#endif /* BEAST_TABLES_HH_ */\n")

def append_table_to_file(filename, table_name, element_type, elements):
    """
    Takes a list of values and appends them to a file such that the maximum line length is not exceeded.
    @param[in] filename Filename to write to.
    @param[in] table_name Name of the table to be written.
    @param[in] element_type Type of the elements in the table. Can be "uint32_t", "float", or "uint8_t".
    @param[in] elements List of values to write.
    """
    ALLOWED_ELEMENT_TYPES = ["uint32_t", "float", "uint8_t"]
    CHARS_PER_LINE = 120

    if not element_type in ALLOWED_ELEMENT_TYPES:
        raise Exception(f"Unrecognized type. \"{element_type}\" is not in f{ALLOWED_ELEMENT_TYPES}.")

    with open(filename, "a") as f:
        f.write(f"static const {element_type} {table_name}[{len(elements)}] = " + "{\n")

        # Split the table into chunks of appropriate size to stay within CHARS_PER_LINE chars per line
        chunks = []
        current_chunk = []
        current_length = 4  # Account for initial spaces
        
        for value in elements:
            
            item = ""
            if element_type == "uint32_t":
                item = f"0x{value:08X}"
            elif element_type == "uint8_t":
                item = f"{value}"
            else:
                item = f"{value:f}f"

            # Add 2 for ", " except for the last item
            if current_length + len(item) + 2 > CHARS_PER_LINE:
                chunks.append(", ".join(current_chunk))
                current_chunk = [item]
                current_length = 4 + len(item)
            else:
                current_chunk.append(item)
                current_length += len(item) + 2
            
        if current_chunk:
            chunks.append(", ".join(current_chunk))
            
        f.write("    " + ",\n    ".join(chunks) + "\n")
        f.write("};\n\n")

def add_beast_rssi_table_to_file():
    """
    Beast signal level = sqrt(rssi_FS)*255 = sqrt(10^(rssi_dBFS / 10))*255 = 10^(rssi_dBFS / 10 / 2)*255
    = 10^(rssi_dBFS / 10 / 2 + log10(255))
    rssi_dBFS = (rssi_dBm - MAX_RSSI_DBM) * RSSI_SCALE_FACTOR

    Best signal level = 10^([(rssi_dBm - MAX_RSSI_DBM) * RSSI_SCALE_FACTOR] / 10 / 2 + log10(255))
    """
    rssi_dbfs_values = []
    for rssi_dBm in range(MIN_RSSI_DBM, MAX_RSSI_DBM + 1):
        rssi_dbfs_value = 10**(((rssi_dBm - MAX_RSSI_DBM) * RSSI_SCALE_FACTOR) / 10 / 2 + math.log10(255))
        rssi_dbfs_values.append(round(rssi_dbfs_value))
    
    with open(BEAST_TABLES_FILENAME, "a") as f:
        f.write(f"static const uint16_t kMinRSSIdBm = {MIN_RSSI_DBM};\n")
        f.write(f"static const uint16_t kMaxRSSIdBm = {MAX_RSSI_DBM};\n")
        table_num_steps = MAX_RSSI_DBM - MIN_RSSI_DBM
        f.write(f"// Table that maps {table_num_steps} RSSI values to their corresponding values as a Mode S Beast dBFS Byte.\n")
    append_table_to_file(BEAST_TABLES_FILENAME, "kRSSIdBmToRSSIdBFS", "uint8_t", rssi_dbfs_values)

def generate_beast_tables_hh():
    """
    Generate the beast_tables.hh file.
    """

    start_file()

    add_beast_rssi_table_to_file()
    
    end_file()


if __name__ == "__main__":
    print("Generating beast_tables.hh...", end="")
    generate_beast_tables_hh()
    print("Done!")