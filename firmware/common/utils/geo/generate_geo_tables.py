import math

HAV_TABLE_NUM_STEPS = 10000 # Haversine table uses about 40kB of flash.
HAVDIFF_TO_M_TABLE_NUM_STEPS = 50000 # Havdiff to meters table uses about 200kB of flash.
GEO_TABLES_FILENAME = "geo_tables.hh"

def deg2rad(deg):
    return deg / 360.0 * (2 * math.pi)

def rad2deg(rad):
    return rad / (2 * math.pi) * 360.0

def start_file():
    """
    Start the geo_tables.hh file.
    """
    with open(GEO_TABLES_FILENAME, "w") as f:
        f.write("// This file is auto-generated by generate_geo_tables.py.\n")
        f.write("#ifndef GEO_TABLES_HH_\n")
        f.write("#define GEO_TABLES_HH_\n\n")
        f.write("#include <cstdint>\n\n")

def end_file():
    """
    End the geo_tables.hh file.
    """
    with open(GEO_TABLES_FILENAME, "a") as f:
        f.write("#endif /* GEO_TABLES_HH_ */\n")

def append_table_to_file(filename, table_name, element_type, elements):
    """
    Takes a list of values and appends them to a file such that the maximum line length is not exceeded.
    @param[in] filename Filename to write to.
    @param[in] table_name Name of the table to be written.
    @param[in] element_type Type of the elements in the table. Can be "uint32_t" or "float".
    @param[in] elements List of values to write.
    """
    ALLOWED_ELEMENT_TYPES = ["uint32_t", "float"]
    CHARS_PER_LINE = 120

    if not element_type in ALLOWED_ELEMENT_TYPES:
        raise Exception(f"Unrecognized type. \"{element_type}\" is not in f{ALLOWED_ELEMENT_TYPES}.")

    with open(filename, "a") as f:
        f.write(f"static const {element_type} {table_name}[{len(elements)}] = " + "{\n")

        # Split the table into chunks of appropriate size to stay within CHARS_PER_LINE chars per line
        chunks = []
        current_chunk = []
        current_length = 4  # Account for initial spaces
        
        for value in elements:
            
            item = ""
            if element_type == "uint32_t":
                item = f"0x{value:08X}"
            else:
                item = f"{value:f}f"

            # Add 2 for ", " except for the last item
            if current_length + len(item) + 2 > CHARS_PER_LINE:
                chunks.append(", ".join(current_chunk))
                current_chunk = [item]
                current_length = 4 + len(item)
            else:
                current_chunk.append(item)
                current_length += len(item) + 2
            
        if current_chunk:
            chunks.append(", ".join(current_chunk))
            
        f.write("    " + ",\n    ".join(chunks) + "\n")
        f.write("};\n\n")

def add_hav_awb_table_to_file():
    """
     Function: hav(theta) = (sin(theta * 0.5f))^2
    """
    hav_values = []
    for i in range(HAV_TABLE_NUM_STEPS):
        theta_deg = i * (180.0 / (HAV_TABLE_NUM_STEPS-1))
        hav_values.append((math.sin(theta_deg * (math.pi / 360.0)))**2)
    hav_values.append(1.0) # Add 1.0f to the end to allow linear interpolation for theta = 180 degrees.
    
    with open(GEO_TABLES_FILENAME, "a") as f:
        f.write(f"static const uint16_t kDeg180ToHavNumSteps = {HAV_TABLE_NUM_STEPS};\n\n")
        f.write(f"// Table that maps {HAV_TABLE_NUM_STEPS} angle increments from 0 to 180 degrees to the Haversine function.\n")
        f.write(f"// hav(theta) = (sin(theta * 0.5f))^2\n")
    append_table_to_file(GEO_TABLES_FILENAME, "kDeg180ToHav", "float", hav_values)

def add_havdiff_to_m_table_to_file():
    """
    2 * kEarthMeanRadius * asin(sqrt(x))
    """
    EARTH_MEAN_RADIUS_M = 6372797.560856 # Quadratic mean radius for WS-84
    values = []
    for i in range(HAVDIFF_TO_M_TABLE_NUM_STEPS):
        values.append(round(2 * EARTH_MEAN_RADIUS_M * math.asin(math.sqrt(i / (HAVDIFF_TO_M_TABLE_NUM_STEPS-1)))))
    values.append(round(2 * EARTH_MEAN_RADIUS_M * math.asin(math.sqrt(1)))) # Add extra value to the end to allow interpolation.
    with open(GEO_TABLES_FILENAME, "a") as f:
        f.write(f"static const uint16_t kHavdiffToMetersNumSteps = {HAVDIFF_TO_M_TABLE_NUM_STEPS};\n\n")
        f.write(f"// Table that maps {HAVDIFF_TO_M_TABLE_NUM_STEPS} havdiff expression values to meters.\n")
        f.write(f"// 2 * kEarthMeanRadius * asin(sqrt(x))\n")
        append_table_to_file(GEO_TABLES_FILENAME, "kHavdiffToMeters", "uint32_t", values)

def generate_geo_tables_hh():
    """
    Generate the geo_tables.hh file.
    """

    start_file()

    add_hav_awb_table_to_file()
    add_havdiff_to_m_table_to_file()
    
    end_file()


if __name__ == "__main__":
    print("Generating geo_tables.hh...", end="")
    generate_geo_tables_hh()
    print("Done!")