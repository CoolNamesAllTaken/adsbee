def generate_crc_table(generator, bits):
    table = []
    mask = (1 << bits) - 1  # Create mask of required length
    top_bit = 1 << (bits - 1)
    
    for i in range(256):
        crc = i << (bits - 8)  # Shift input byte to top of register
        # Process all 8 bits of the input byte
        for _ in range(8):
            if crc & top_bit:
                crc = ((crc << 1) & mask) ^ generator
            else:
                crc = (crc << 1) & mask
        table.append(crc)
    return table

def start_file():
    with open("crc_tables.hh", "w") as f:
        f.write("// This file is auto-generated by generate_crc_tables.py.\n")
        f.write("#ifndef CRC_TABLES_HH_\n")
        f.write("#define CRC_TABLES_HH_\n\n")
        f.write("#include <cstdint>\n\n")

def end_file():
    with open("crc_tables.hh", "a") as f:
        f.write("#endif /* CRC_TABLES_HH_ */\n")

def add_generator_to_file(generator_name, generator):
    with open("crc_tables.hh", "a") as f:
        f.write(f"static const uint32_t {generator_name} = 0x{generator:08X};\n")

def add_table_to_file(table_name, table):
    CHARS_PER_LINE = 120

    with open("crc_tables.hh", "a") as f:
        f.write(f"static const uint32_t {table_name}[{len(table)}] =" + "{\n")

        # Split the table into chunks of appropriate size to stay within CHARS_PER_LINE chars per line
        chunks = []
        current_chunk = []
        current_length = 4  # Account for initial spaces
        
        for value in table:
            item = f"0x{value:06X}"
            # Add 2 for ", " except for the last item
            if current_length + len(item) + 2 > CHARS_PER_LINE:
                chunks.append(", ".join(current_chunk))
                current_chunk = [item]
                current_length = 4 + len(item)
            else:
                current_chunk.append(item)
                current_length += len(item) + 2
            
        if current_chunk:
            chunks.append(", ".join(current_chunk))
            
        f.write("    " + ",\n    ".join(chunks) + "\n")
        f.write("};\n\n")

def generate_crc_tables_hh():
    CRC24_GENERATOR = 0xFFF409 # Mode S CRC-24 generator.
    # CRC24_GENERATOR = 0x864cfb

    start_file()

    crc24_table = generate_crc_table(CRC24_GENERATOR, 24)
    add_generator_to_file("crc24_generator", CRC24_GENERATOR)
    add_table_to_file("crc24_table", crc24_table)
    
    end_file()

if __name__ == "__main__":
    print("Generating crc_tables.hh...", end="")
    generate_crc_tables_hh()
    print("Done!")